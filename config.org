#+TITLE:VVMACS Configuration

* MELPA
MELPA is a package repository for Emacs that allows it to use the most popular Emacs packages. The following code will add it to Emacs. 
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+END_SRC
* Appearance
** Startup UI
*** Disable Startup Message
Disables the default GNU Emacs startup message. This will be replaced with the dashboard package.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
*** Dashboard
This emacs package serves as a better alternative for the standard emacs startup message.
#+BEGIN_SRC emacs-lisp
    (use-package dashboard
        :ensure t
        :config
        (setq dashboard-set-file-icons t)
        (setq dashboard-startup-banner 'logo)
        (setq dashboard-set-heading-icons t)
        (dashboard-setup-startup-hook)
        (setq dashboard-items '((recents  . 5)
                                (bookmarks . 5)
                                (projects . 5))))
#+END_SRC
** Modeline
The Doom-Modeline package is from Doom Emacs. It displays useful information such as filename, encoding, and even email notifications.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode))
#+END_SRC
** Disable Toolbar/Menubar/Scrollbar
*** Toolbar
While the toolbar is helpful, most things it offers can be replaced with keybinds.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
*** Menubar
Same with the menubar.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
*** Scrollbar
Scrollbars are nice, but it's a waste of space.
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** Default Font
#+BEGIN_SRC emacs-lisp
(set-frame-font "FiraMono Nerd Font-18" nil t)
#+END_SRC
** Themes
The default Emacs theme is boring, and most importantly, it doesn't have a dark mode. So lets solve both those problems.
*** Doom-Themes
The doom-themes package is a collection of popular themes.
#+BEGIN_SRC emacs-lisp
(use-package doom-themes)
#+END_SRC
*** Set Default Themes
Downloading themes means nothing if you can't actually use them, so set them with load-theme.
#+BEGIN_SRC emacs-lisp
(load-theme 'doom-snazzy t)
#+END_SRC
** Ivy Mode
Ivy Mode allows for better looking menus. Along with fuzzy autocomplete and rich colors.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :config
    (ivy-mode 1))
#+END_SRC
** Swiper
Swiper is a fuzzy finding search tool to find text within buffers. Think of this like a better Ctrl+F.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
  :defer t
  :bind (("C-s" . swiper)))
#+END_SRC
** Centaur Tabs
In VSCode tabs are shown as a good way to organize code windows. A useful package named centaur-tabs adds this functionality to emacs.
#+BEGIN_SRC emacs-lisp
(use-package centaur-tabs
      :demand
      :config
         (centaur-tabs-mode t)                       ; Enable Centaur Tabs
         (setq centaur-tabs-set-icons t)             ; Enable Icons
         (setq centaur-tabs-gray-out-icons t)        ; Gray Out Inactive Tabs
         (setq centaur-tabs-set-bar 'left)           ; Line to the left of tab
         (setq centaur-tabs-set-modified-marker t)   ; Adds mark to tab when buffer is editied.
         (setq centaur-tabs-modified-marker "•")
       :hook
         (dashboard-setup-startup-hook . centaur-tabs-local-mode)
         (dashboard-mode . centaur-tabs-local-mode)
      :bind
         ("C-<tab>" . centaur-tabs-forward))
#+END_SRC
** Rainbow Delimeters
Sometimes it's hard to tell which parentheases are paired to which. Rainbow delimeters gives each parenthasee their own colors to help differentiate them.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
* Evil Mode
This is for vim users, it enables Vim keybindings in Emacs. If you ever need to use default Emacs keybindings for some reason, you can toggle emacs mode with Ctrl + Z.
#+BEGIN_SRC emacs-lisp
(use-package evil
   :ensure t
   :init
   (evil-mode))
#+END_SRC
** Undo-Tree
In order to fully make use of Evil mode, the undo-package is installed.
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
:after evil
:config (global-undo-tree-mode 1))
#+END_SRC
Now we have to bind the vim undo keys to the undo-tree functions.
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map "u" 'undo-tree-undo)
(define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
#+END_SRC
** Tab Navigation
Vim has a very unique way of cycling through tabs. Porting them to Emacs can be done in two lines.
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "g t") 'centaur-tabs-forward)
(define-key evil-normal-state-map (kbd "g T") 'centaur-tabs-backward)
#+End_SRC
* Which-Key
Emacs has a lot of keybindings, to the point where it can be hard to track. To solve this problem we use which-key. A package which shows a HUD type feature that displays what keybinds you are about to use.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.3))
#+END_SRC
* Git Integration
  Git is one of the most important tools for developers, chances are you've downloaded this distro from a git repo. We can use the magit package to bring the Git protocol to emacs.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t)
#+END_SRC
* Escape Key Escapes
The escape key doesn't really work in Emacs, if you accidentally open a menu you're basically stuck in it. The following code will quit most menus when ESC is pressed.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
* General Keybindings
Vim has a very useful function called leader keys which are allow for (in my opinion) more reasonable keybindings.
In Emacs the package for leader keys is called general.el.
#+BEGIN_SRC emacs-lisp
(use-package general
  :after evil
  :config
   (general-create-definer vvgeneral/magit-keys
  :keymaps '(normal)
  :prefix "SPC")
  (general-create-definer vvgeneral/buffer-keys
  :keymaps '(normal)
  :prefix "SPC")
  (general-create-definer vvgeneral/projectile-keys
  :keymaps '(normal)
  :prefix "SPC")
)
#+END_SRC
** Git Shortcuts
General used with magit allows for operating extremely fast. The leader key for git operations in this configuration is SPC-g.
#+BEGIN_SRC emacs-lisp
(vvgeneral/magit-keys
  "g" '(:ignore t :which-key "magit shortcuts")
  "gs" '(magit-status :which-key "git status")
  "gb" '(magit-branch :which-key "git branch actions")
)
#+END_SRC
** Buffer Shortcuts
Buffer management in Emacs isn't really the most friendly out of the box. The keybindings are confusing and difficult to execute. Let's fix that with general leader keys.
#+BEGIN_SRC emacs-lisp
 (vvgeneral/buffer-keys
     "b" '(:ignore t :which-key "buffer shortcuts")
     "bs"  '(counsel-switch-buffer :which-key "Switch active buffer")
     "bk"  '(kill-current-buffer :which-key "Kill active buffer")
     "br"  '(rename-buffer :which-key "Rename active buffer"))
#+END_SRC
** Projectile Shortcuts
This ones pretty simple because projectile has it's own shortcut menu.
#+BEGIN_SRC emacs-lisp
(vvgeneral/projectile-keys
    "pr" '(projectile-command-map :which-key "projectile commands"))
#+END_SRC
* Split Navigation
In emacs you use split buffers when you often when you need to reference something. Instead of using our mouse, lets configure our split navigation in a Vim-like way.
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-l") 'windmove-right)
(define-key evil-normal-state-map (kbd "C-k") 'windmove-up)
(define-key evil-normal-state-map (kbd "C-j") 'windmove-down)
(define-key evil-normal-state-map (kbd "C-h") 'windmove-left)
#+END_SRC

* Org Mode Configuration
Ask anyone what pops into their head when they think of Emacs and what would they say? Org Mode! Unfortunately, the default Org Mode is a bit, lackluster. So let's fix that.

First, lets install Org Superstar, a super helpful package that adds things like bullet points, icons, and titles.
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
      :defer t
      :hook (org-mode . org-superstar-mode)
      :config
      (org-superstar-configure-like-org-bullets)
      (setq inhibit-compacting-font-caches t)
      (setq org-hidden-keywords '(title)))
#+END_SRC

Second, lets put some margins on Org Mode so it looks like a real document.
#+BEGIN_SRC emacs-lisp
(defun vv/org-mode-visual-fill ()
   (setq visual-fill-column-width 100
   visual-fill-column-center-text t)
   (visual-fill-column-mode 1))
(use-package visual-fill-column
   :defer t
   :hook (org-mode . vv/org-mode-visual-fill))
#+END_SRC

While we're at it, let's make the headers a more "professional" font instead of something that looks like it came out of some weird hackerman terminal.
#+BEGIN_SRC emacs-lisp
(dolist (face '((org-level-1 . 1.2)
  (org-level-2 . 1.1)
  (org-level-3 . 1.05)
  (org-level-4 . 1.0)
  (org-level-5 . 1.1)
  (org-level-6 . 1.1)
  (org-level-7 . 1.1)
  (org-level-8 . 1.1)))
(set-face-attribute (car face) nil :font "Roboto" :weight 'regular :height (cdr face)))
#+END_SRC

And finally add some finishing touches by editing Org Mode itself.
#+BEGIN_SRC emacs-lisp
(defun vv/org-setup ()
         (org-indent-mode)
         (visual-line-mode t)
         (setq evil-auto-indent nil)
         (setq org-src-ask-before-returning-to-edit-buffer nil))
(use-package org
   :hook (org-mode . vv/org-setup)
   :config
  (setq org-ellipsis " ⤵")
  (setq org-support-shift-select t)
  (setq org-src-tab-acts-natively t)
  (setq org-startup-folded t))
#+END_SRC

* Backup Files
Emacs periodically creates backup files. The problem is they get in the way of your projects file structure and are quite annoying. We can send these files into a different directory with the following lines of code.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
#+END_SRC
* Projectile
Projectile is a neat Emacs package for managing projects.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :defer t
    :config (projectile-mode))
#+END_SRC
