#+TITLE:VVMACS Configuration
#+STARTUP: hideblocks
#+OPTIONS: toc:2


* Table of Contents :toc:
- [[#introduction][Introduction]]
  - [[#emacswiki][EmacsWiki]]
- [[#package-management][Package Management]]
  - [[#melpa][MELPA]]
  - [[#auto-updates][Auto-Updates]]
- [[#appearance][Appearance]]
  - [[#disable-startup-message][Disable Startup Message]]
  - [[#dashboard][Dashboard]]
  - [[#modeline][Modeline]]
  - [[#default-font][Default Font]]
  - [[#ivy][Ivy]]
  - [[#swiper][Swiper]]
  - [[#which-key][Which-Key]]
  - [[#rainbow-delimeters][Rainbow Delimeters]]
  - [[#line-numbers][Line Numbers]]
  - [[#themes][Themes]]
- [[#prompts][Prompts]]
  - [[#text-only-quit-messages][Text Only Quit Messages]]
  - [[#y-or-n][Y or N]]
  - [[#create-nonexistent-files][Create nonexistent files]]
  - [[#kill-live-buffer][Kill live buffer]]
- [[#evil-mode][evil-mode]]
  - [[#undo-fu][undo-fu]]
- [[#generalel][general.el]]
- [[#helpful][helpful]]
- [[#standardized-keys][Standardized Keys]]
  - [[#escape-key-escapes][Escape Key Escapes]]
  - [[#delete-word-with-c-backspace][Delete Word with C-Backspace]]
  - [[#save-key][Save Key]]
  - [[#select-all-key][Select All Key]]
  - [[#find-file][Find File]]
- [[#split-navigation][Split Navigation]]
- [[#org-mode][Org Mode]]
  - [[#appearance-1][Appearance]]
  - [[#src-blocks][SRC Blocks]]
  - [[#org-pandoc][Org-Pandoc]]
  - [[#org-package][Org Package]]
- [[#erc][ERC]]
- [[#development][Development]]
  - [[#autocomplete][Autocomplete]]
  - [[#auto-comment][Auto Comment]]
  - [[#auto-pairing][Auto Pairing]]
  - [[#code-folding][Code Folding]]
  - [[#language-server-protocol][Language Server Protocol]]
  - [[#flycheck][Flycheck]]
  - [[#debugging][Debugging]]
  - [[#treemacs][Treemacs]]
  - [[#languages][Languages]]
  - [[#terminals][Terminals]]
  - [[#version-control-and-project-management][Version Control and Project Management]]
- [[#daemon-mode][Daemon Mode]]
  - [[#font][Font]]
  - [[#scrollbar][Scrollbar]]
  - [[#modeline-icon][Modeline Icon]]
  - [[#transparency][Transparency]]
- [[#misc][Misc]]
  - [[#discord-rich-presence][Discord Rich Presence]]
  - [[#backup-files][Backup Files]]
  - [[#delete-highlighted-text][Delete Highlighted Text]]
  - [[#macos-fixes][macOS Fixes]]
  - [[#prettify-symbols][Prettify Symbols]]
  - [[#yasnippet][YASnippet]]
- [[#afterword][Afterword]]

* Introduction
Emacs is a *not* a text editor, it is a fully featured enviroment for Elisp code. It just happens to be able to edit text. As such, it allows for customization and extensibility far beyond the likes of VSCode and even Vim.

However, one of the biggest downsides of emacs is it's steep learning curve, the language used to customize Emacs is difficult and it's syntax is quite strange. This makes Emacs quite daunting to new users, who'd rather stick with their limiting toolkit rather than spend weeks or months learning Emacs.

This config aims to ease the transition for new users looking to join the Church of Emacs by changing the annoying features and adding the ones that most people looking to start using Emacs would want, while remaining lightweight and straightforward enough to not seem daunting to new users.

But one of the best parts of this configuration for new users is the fact that it is written in Org Mode, the Markdown-like file format native to Emacs. This allows for detailed explanations of each tweak and package installed along with an easy way to navigate the file.

** EmacsWiki
The [[https://www.emacswiki.org/][EmacsWiki]] is one of the most useful sources for learning how to customize Emacs and it's many packages. If at any point you want to learn how to customize or add something, try looking there first.
* Package Management
** MELPA
MELPA is a package repository for Emacs that allows it to use the most popular Emacs packages. The following code will add it to Emacs. 

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(setq use-package-always-ensure t)
#+end_src
** Auto-Updates
The ~auto-package-update~ package to automatically update all of your packages

#+begin_src emacs-lisp
  (use-package auto-package-update
    :ensure t
    :custom
    (auto-package-update-interval 7)
    (auto-package-prompt-before-update t)
    (auto-package-update-hide-results t))
#+end_src
* Appearance

** Disable Startup Message
Disables the default GNU Emacs startup message. This will be replaced with a separate package.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
** Dashboard
This emacs package serves as a better alternative for the standard emacs startup message.

#+begin_src emacs-lisp
(use-package dashboard
    :ensure t
    :config
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-set-heading-icons t)
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5))))
#+end_src
** Modeline
The ~doom-modeline~ package is from Doom Emacs. It displays useful information such as the filename, encoding, and even email notifications.

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode)
  :config
  (setq doom-modeline-env-python-executable "python3"))
#+END_SRC
** Default Font
#+begin_src emacs-lisp
(set-frame-font "Fira Code-18" nil t)
#+END_SRC
*** Emoji Font
Emojis aren't natively supported in Emacs, you need to set the font for them.

#+begin_src emacs-lisp
(when (member "Apple Color Emoji" (font-family-list))
  (set-fontset-font
   t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
#+end_src
** Ivy
Autocomplete for menus like ~M-x~.

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    :config
    (ivy-mode 1))
#+END_SRC
** Swiper
Swiper is a fuzzy finding search tool to find text within buffers. Think of this like a better Ctrl+F.

#+begin_src emacs-lisp
  (use-package swiper
      :defer t)

  (if (equal system-type 'darwin)
      (global-set-key (kbd "s-f") 'counsel-grep-or-swiper)   ;; MacOS Bindings
      (global-set-key (kbd "C-f") 'counsel-grep-or-swiper))  ;; Non Mac bindings

#+END_SRC
** Which-Key
Show keybindings in minibuffer.

#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.3))
#+END_SRC
** Rainbow Delimeters
Rainbow colored parenthasees, brackets, and braces.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
    :defer t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Line Numbers
Show line numbers.

#+begin_src emacs-lisp
(global-display-line-numbers-mode)
#+END_SRC
*** Hide Line Numbers
Hide line numbers for certain modes. (e.g org mode, terminal modes)

#+begin_src emacs-lisp
  (dolist (mode '(org-mode-hook
      term-mode-hook
      eshell-mode-hook
      treemacs-mode-hook
      vterm-mode-hook
      shell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC
** Themes
*** Doom-Themes
Load ~doom-snazzy~ from ~doom-themes.~

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :if (display-graphic-p)
    :config
    (load-theme 'doom-snazzy t))

  (if (daemonp)
      (load-theme 'doom-snazzy t))
#+END_SRC

* Prompts
Configure the way Emacs uses prompts.

** Text Only Quit Messages
Replace the annoying popup that appears whenever attempting to close a window with a text confirm message.

#+begin_src emacs-lisp
(setq use-dialog-box nil)
#+END_SRC
** Y or N
Typically prompts will ask for a yes or no answer, this is fine, but pressing y or n is obviously quicker.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Create nonexistent files
By default Emacs prompts you whenever you attempt to create a new file. It makes no sense though, so lets disable it.

#+begin_src emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src
** Kill live buffer
When a buffer has a running process in it like the Python shell, attempting to quit will raise a prompt. Again, pointless, so I'm going to remove it.

#+begin_src emacs-lisp
(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
         kill-buffer-query-functions))
#+end_src
* evil-mode
Vim keybindings in emacs.

#+begin_src emacs-lisp
  (use-package evil
     :ensure t
     :init
     (setq evil-want-keybinding nil)
     :config
     (evil-mode)
     (evil-set-undo-system 'undo-fu)
     (global-unset-key (kbd "C-o")))

  (use-package evil-collection
    :ensure t
    :config
    (evil-collection-init))
#+end_src
** undo-fu
Add undo framework to evil.

#+begin_src emacs-lisp
(use-package undo-fu
    :after evil)
#+end_src
* general.el
Package for vim like keybindings with leader keys.

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
     (general-create-definer vvgeneral/magit-keys
    :keymaps '(normal)
    :prefix "SPC")
     (general-create-definer vvgeneral/buffer-keys
    :keymaps '(normal)
    :prefix "SPC")
     (general-create-definer vvgeneral/projectile-and-treemacs-keys
    :keymaps '(normal)
    :prefix "SPC")
     (general-create-definer vvgeneral/code-keys
    :keymaps '(normal)
    :prefix "SPC")
  )
#+END_SRC
*** Git Shortcuts
General used with magit allows for operating extremely fast. The leader
key for git operations in this configuration is SPC-g.

#+begin_src emacs-lisp
(vvgeneral/magit-keys
  "g" '(:ignore t :which-key "magit shortcuts")
  "gs" '(magit-status :which-key "git status")
  "gb" '(magit-branch :which-key "git branch actions")
  ;; File Shortcuts
  "gf" '(:ignore t :which-key "file actions")
  "gfs" '(magit-stage-file :which-key "stage current file")
  "gfu" '(magit-unstage-file :which-key "unstage current file")
  "gfr" '(magit-reset :which-key "restore file")
  ;; Commits
  "gc" '(magit-commit :which-key "commit actions")
)
#+END_SRC
*** Buffer Shortcuts
Buffer management in Emacs isn't really the most friendly out of the box. The keybindings are confusing and difficult to execute. Let's fix that with general leader keys.

#+begin_src emacs-lisp
 (vvgeneral/buffer-keys
     "b" '(:ignore t :which-key "buffer shortcuts")
     "bs"  '(counsel-switch-buffer :which-key "Switch active buffer")
     "bk"  '(kill-current-buffer :which-key "Kill active buffer")
     "br"  '(rename-buffer :which-key "Rename active buffer"))
#+END_SRC
*** Projectile/Treemacs Shortcuts
#+begin_src emacs-lisp
  (vvgeneral/projectile-and-treemacs-keys
      "p" '(:ignore t :which-key "project actions")
      "pp" '(treemacs :which-key "treemacs")
      "pr" '(projectile-command-map :which-key "projectile commands"))
#+END_SRC
*** Code Shortcuts
#+begin_src emacs-lisp
  (vvgeneral/code-keys

      "c" '(:ignore t :which-key "code actions")
      ;; LSP Binds

      ;; refrences and defenition
      "cf" '(:ignore t :which-key "find")
      "cfr" '(lsp-find-references :which-key "references")
      "cfd" '(lsp-find-definition :which-key "references")
      ;; rename
      "cr" '(:ignore t :which-key "refactor")
      "crr" '(lsp-rename :which-key "rename")
      "cro" '(lsp-organize-imports :which-key "organize imports")
    
      ;; Dap Mode Debugging Binds
      "cd" '(:ignore t :which-key "debug actions")
      "cdb" '(dap-breakpoint-toggle :which-key "toggle breakpoint")
      "cdd" '(dap-debug :which-key "debug program")
  )
#+END_SRC
* helpful
~helpful~ gives better help menus and documentation in Emacs.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
* Standardized Keys
Make keybindings that work like other programs.

** Escape Key Escapes
Escape key quits menus.

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
** Delete Word with C-Backspace
Delete the previous word with ~c-backspace~ like in other apps

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-<backspace>") 'backward-kill-word)
#+end_src
** Save Key
Instead of using ~C-x C-s~, configure Emacs to use ~C-s~.

#+begin_src emacs-lisp
(if (equal system-type 'darwin)
  (global-set-key (kbd "s-s") 'save-buffer)     ;; macOS save key ⌘
  (global-set-key (kbd "C-s") 'save-buffer))
#+END_SRC
** Select All Key
~C-a~ selects all text in buffer.

#+begin_src emacs-lisp
(unless (equal system-type 'darwin)
    (define-key evil-insert-state-map (kbd "C-a") 'mark-whole-buffer))
#+end_src
** Find File
The default emacs binding for opening a file is ~C-x C-f~, which isn't the best. This line will change it to ~C-o~. (Or ~s-o~ for mac users)

*NOTE:* For non-macOS users, the ~C-o~ binding can only be used in normal mode due to it being an already existing keybind.
#+begin_src emacs-lisp
(if (equal system-type 'darwin)
    (global-set-key (kbd "s-o") 'find-file)     ;; macOS find file key ⌘
    (evil-define-key 'normal 'global (kbd "C-o") 'find-file))
#+end_src

* Split Navigation
Use vim-like navigation to change splits.

#+begin_src emacs-lisp
  (unless (equal system-type 'darwin)
      (progn
          (define-key evil-normal-state-map (kbd "C-l") 'windmove-right)
          (define-key evil-normal-state-map (kbd "C-k") 'windmove-up)
          (define-key evil-normal-state-map (kbd "C-j") 'windmove-down)
          (define-key evil-normal-state-map (kbd "C-h") 'windmove-left)))

;; Macos Command Key Split Bindings
  (if (equal system-type 'darwin)
      (progn
          (global-set-key (kbd "s-l") 'windmove-right)
          (global-set-key (kbd "s-h") 'windmove-left)
          (global-set-key (kbd "s-j") 'windmove-down)
          (global-set-key (kbd "s-k") 'windmove-up)))
#+END_SRC
* Org Mode
Various tweaks to improve Org-Mode.

** Appearance
Make Org Mode look nice.

*** Org Superstar
~org-superstar~ is used for custom bullet points and titles.

#+begin_src emacs-lisp
(use-package org-superstar
    :defer t
    :hook (org-mode . org-superstar-mode)
    :config
    (org-superstar-configure-like-org-bullets)
    (setq inhibit-compacting-font-caches t)
    (setq org-superstar-headline-bullets-list '("⦿" "►" "○"))
    (setq org-hidden-keywords '(title)))
#+END_SRC
*** Margins
Second, lets put some margins on Org Mode so it looks like a real document.

#+begin_src emacs-lisp
  (defun vv/org-mode-visual-fill ()
     (setq visual-fill-column-width 100
     visual-fill-column-center-text t)
     (visual-fill-column-mode 1))
  (use-package visual-fill-column
     :defer t
     :hook (org-mode . vv/org-mode-visual-fill))
#+END_SRC
*** Header Font
Custom fonts for headers. Uses Cantarell.

#+begin_src emacs-lisp
  (defun vv/org-font ()
      (dolist (face '((org-level-1 . 1.2)
      (org-level-2 . 1.1)
      (org-level-3 . 1.05)
      (org-level-4 . 1.0)
      (org-level-5 . 1.1)
      (org-level-6 . 1.1)
      (org-level-7 . 1.1)
      (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))
#+END_SRC
*** Table of Contents
The ~toc-org~ package brings table of contents to org mode.

#+begin_src emacs-lisp
  (use-package toc-org
    :defer t
    :after org)
#+end_src
** SRC Blocks
*** Code Evaluation
Org Mode can be used like Jupyter Notebooks in the sense that code can be written in executed directly inside of Org. You can run these code blocks with ~C-c C-C~

*NOTE:* Mac users may get a warning upon running a python code block. This is normal, just close the buffer.
#+begin_src emacs-lisp
  (require 'ob-shell)  ;; Required for shell scripting.

  (org-babel-do-load-languages
    'org-babel-load-languages
    '(
      (shell . t)  ;; Shell scripting
      (python . t)  ;; Python
      (java . t)  ;; Java
  ))

  (if (eq system-type 'darwin)
      (setq org-babel-python-command "python3"))  ;; Use python3 on macOS. 

#+end_src
Whenever you attempt to run a code block, youll get a warning. It's up to you whether or not you want this as it can help security. But for conveniences sake, it's disabled by default.

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src
Also enable lsp-mode in the Org Src Buffer, allowing for a seamless editing experience.
To activiate it within a python src block,
- Run ~C-c C-'~ in a src block.
- ~M-x (language)-mode~ in the src buffer.
#+begin_src emacs-lisp
(defun org-babel-edit-prep:python (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
  (lsp))
#+end_src
*** SRC Block Shortcuts
Easy ways to create src blocks. 

#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("py" . "src python :session :results output replace"))
  (add-to-list 'org-structure-template-alist '("java" . "src java :results output"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh :results output replace"))
#+end_src
** Org-Pandoc
Not everyone uses Emacs however, so we can use ~ox-pandoc~ to convert our org mode files into more standard formats like PDF or Markdown.

*NOTE*: Emacs does have a built-in way to export Org Mode documents, but it doesn't export in nearly enough formats as this package. But if you want to use the default exporter, just input ~C-c C-e~.
#+begin_src emacs-lisp
(use-package ox-pandoc
    :defer t)
#+END_SRC
** Org Package
And finally add some finishing touches by configuring the Org Mode package itself.

 #+begin_src emacs-lisp
      (defun vv/org-setup ()
        (org-indent-mode)
        (visual-line-mode t)
        (setq evil-auto-indent nil)
        (setq org-src-ask-before-returning-to-edit-buffer nil))
      (use-package org
          :hook
          (org-mode . toc-org-mode)
          (org-mode . vv/org-font)
          (org-mode . vv/org-setup)
          :config
          (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))  ;; Change LaTeX preview size
          (setq org-image-actual-width nil)
          (setq org-ellipsis " ⤸")
          (setq org-hide-emphasis-markers t)
          (setq org-support-shift-select t)
          (setq org-src-tab-acts-natively t)
          (setq org-startup-folded t)
          (setq org-startup-indented t))
#+END_SRC
* ERC
ERC is Emacs built-in IRC client.

*NOTE:* Always run ~erc-tls~ instead of ~erc~ for encrypted traffic!
#+begin_src emacs-lisp
  (setq erc-server "irc.libera.chat" ;; join libera chat by default
        erc-nick "ahooda"            ;; set the nick name automatically
        erc-kill-buffer-on-part t    ;; Kill a chat buffer when you leave the server
        erc-track-shorten-start 20   ;; Doom modeline longer notifs
        erc-auto-query 'bury)        ;; Don't popup chat buffer when you get a notif.

  (defun erc-setup ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t
          visual-fill-column-mode t)
    (display-line-numbers-mode 0))
  (add-hook 'erc-mode-hook 'erc-setup)
  (add-hook 'erc-mode-hook 'visual-fill-column-mode 1)
#+end_src
* Development
Until now, this config has mostly been about making Emacs look nice and adding keybinds. But considering how Emacs is a *development* focused editor, there should be basic things that most IDEs have.

** Autocomplete
The ~company~ package is used for autocomplete.

#+begin_src emacs-lisp
  (use-package company
     :after lsp-mode
     :ensure t
     :defer t
     :hook (lsp-mode . company-mode)
     :config
     (add-to-list 'company-backends 'company-files)
     :custom
     (company-minimum-prefix-length 1)
     (company-idle-delay 0.0)
     :bind (:map company-active-map
              ("<tab>" . company-complete-selection)))   ;; Tab confirms autocomplete
#+END_SRC

Also use ~company-box~ to add better icons to ~company-mode~ completions

#+begin_src emacs-lisp
  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))
#+end_src
** Auto Comment
Use ~C-/~ (or ~s-/~ on macs) to comment a line.

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
    :after evil
    :if (equal system-type 'darwin)
        :bind ("s-/" . evilnc-comment-or-uncomment-lines)) ;; Macos Keybinds

;; Non-macOS keybinds.
(unless (equal system-type 'darwin)
    (global-set-key (kbd "C-/") 'evilnc-comment-or-uncomment-lines))
#+end_src

** Auto Pairing
Automatic pairing of quotes and things.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src

** Code Folding
Code folding with evil.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'hs-minor-mode)
#+end_src

** Language Server Protocol
Language servers are used for linting and autocomplete suggestions. ~lsp-mode~ is the framework for language servers.

#+begin_src emacs-lisp
  (use-package lsp-mode
      :ensure t
      :defer t
      :commands (lsp-mode lsp lsp-deferred)
      :init
      (setq lsp-keymap-prefix "C-c l")
      :config
      (setq lsp-signature-render-documentation nil)
      (setq lsp-completion-show-detail nil)  
      (setq lsp-completion-show-kind nil)
      (setq lsp-signature-auto-activate nil)
      (setq lsp-headerline-breadcrumb-enable nil)
      (lsp-enable-which-key-integration t))
  (use-package lsp-ui
    :defer t
    :custom
    (lsp-ui-doc-position 'bottom)
    :config
    (setq lsp-lens-enable t)
    (setq lsp-ui-doc-enable nil)
    (setq lsp-ui-sideline-enable t)
    :hook (lsp-mode . lsp-ui-mode))
#+END_SRC

** Flycheck
~flycheck~ is a useful error/style checking package.

#+begin_src emacs-lisp
  (use-package flycheck
    :after lsp
    :ensure t
    :config
    (flycheck-mode))
#+end_src
** Debugging
~dap-mode~ is a package for debugging code in Emacs.

#+begin_src emacs-lisp
(use-package dap-mode)
#+end_src

** Treemacs
Treemacs is a VSCode like sidebar for viewing files in a project.

#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :ensure t
    :config
    (setq treemacs-show-hidden-files t)
    (setq treemacs-width 25))
#+end_src
Treemacs icons kinda suck though, the ~treemacs-all-the-icons~ package uses all the icons as a backend for icon rendering to fix it.
#+begin_src emacs-lisp
  (use-package treemacs-all-the-icons
    :after treemacs
    :config
    (treemacs-load-theme "all-the-icons")
    :ensure t)
#+end_src

** Languages
*** Python
Developing in Python is easy with Emacs.

#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :custom
    (python-shell-interpreter "python3")
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))
#+end_src
**** lsp-pyright
Python's language server

*NOTE:* On a new install of VVMacs, you might be prompted to install pyright. This is normal.
#+begin_src emacs-lisp
(use-package lsp-pyright
    :defer t
    :ensure t
    :hook (python-mode . (lambda ()
            (require 'lsp-pyright)
            (lsp-deferred))))  ; or lsp-deferred
#+END_SRC
**** Tabs, Lines, and Pairs
I also like to code with tabs exclusivley for my indentation. So I'm going to set that up here along with some other neat settings.

#+begin_src emacs-lisp
(add-hook 'python-mode-hook
  (lambda ()
    (setq indent-tabs-mode t)
    (setq python-indent 4)
    (setq tab-width 4)
    (toggle-truncate-lines t)))
#+END_SRC
**** Dap Mode
Add the ~dap-python~ module for ~dap-mode~

#+begin_src emacs-lisp
(require 'dap-python)
#+end_src
*** Shell Scripting
**** bash-ls
~bash-ls~ is the language server for shell scripting, install it with ~M-x~ RET ~lsp-install-server~ RET ~bash-ls~ if it doesn't work.
**** Hooks
Configure shell scripting experience with ~add-hook~.

#+begin_src emacs-lisp
  (add-hook 'sh-mode-hook
    (lambda ()
      (setq indent-tabs-mode t)
      (toggle-truncate-lines t)
      (setq tab-width 4)
      (lsp-deferred)))
#+end_src

** Terminals
Use the built in terminals in Emacs.
*** eshell
The eshell is the Emacs alternative to shells. Since the shell is written in emacs lisp, it offers a lot more customization and integration with Emacs.

The ~eshell-git-prompt~ package adds oh-my-zsh like git information in the prompt, it will also add themes like powerline.

#+begin_src emacs-lisp
  (use-package eshell-git-prompt
    :after eshell)
#+end_src

Next create a function that runs the first time eshell is activated in a session.

#+begin_src emacs-lisp
  (defun vveshell/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))
#+end_src

Now hook the function into the eshell and set the prompt theme.

#+begin_src emacs-lisp
  (use-package eshell
    :hook (eshell-first-time-mode . vveshell/configure-eshell)
    :config (eshell-git-prompt-use-theme 'powerline))
#+end_src

*** term-mode
Built in terminal in Emacs.

#+begin_src emacs-lisp
(use-package term
  :config
  (setq explicit-shell-file-name "zsh")
  ;;(setq explicit-zsh-args '())
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src
** Version Control and Project Management
*** Emacs with Git
The ~magit~ package brings the Git protocol to Emacs.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :config
    (add-hook 'git-commit-mode-hook 'evil-insert-state)  ;; Insert mode when commiting

    ;; Git status Keys
    (evil-set-initial-state 'magit-status-mode 'normal)
  )
#+end_src
*** Projectile
Projetile is a project management package.

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :defer t
    :config (projectile-mode))
#+end_src
* Daemon Mode
Run emacs as a daemon

** Font
Emacs in daemon mode has broken fonts.

#+begin_src emacs-lisp
(if (daemonp)
    (setq default-frame-alist '((font . "Fira Code-18"))))
#+end_src
** Scrollbar
Disable the scrollbar.

#+begin_src emacs-lisp
(if (daemonp)
   (scroll-bar-mode -1)) 
#+end_src
** Modeline Icon
The modeline doesn't show icons by default when emacs is run as a daemon.

#+begin_src emacs-lisp
(if (daemonp)
    (setq doom-modeline-icon t))
#+end_src
** Transparency
Daemon frames are transparent to tell them apart.

#+begin_src emacs-lisp
(defun vvdaemon/transparency ()
 (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
 (add-to-list 'default-frame-alist '(alpha . (95 . 95))))

(if (daemonp)
    (vvdaemon/transparency))
#+end_src
* Misc
I didn't know where to put these changes.

** Discord Rich Presence
Let your friends know how cool your text editor is.

#+begin_src emacs-lisp
(use-package elcord)

;; (unless (daemonp)
;;     (elcord-mode))
#+end_src
** Backup Files
Move backup files to another location.

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
#+END_SRC
Disable lockfiles too.

#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+END_SRC
** Delete Highlighted Text
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+END_SRC
** macOS Fixes
*** $PATH fixes
lsp-mode doesn't really work with macOS because the $PATH isn't read correctly a lot.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
    :ensure t)
(if (equal system-type 'darwin)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize)))
#+END_SRC
** Prettify Symbols
*** Org Mode
#+begin_src emacs-lisp
(defun org-icons ()
   "Beautify org mode keywords."
   (setq prettify-symbols-alist '(
	                          (":toc:" . "")        
	                          ("#+RESULTS:" . "")        
	                          ("#+begin_src" . "")        
 				  ("#+begin_src" . "")
                            ("#+end_src" . "")
                            ("#+END_SRC" . "")
				  ("[ ]" . "")
				  ("[X]" . ""))))

(add-hook 'org-mode-hook 'prettify-symbols-mode)
(add-hook 'org-mode-hook 'org-icons)
#+END_SRC
** YASnippet
Add code snippets easily.

[[https://www.youtube.com/watch?v=W-bRZlseNm0][Watch a YASnippet tutorial here.]]
#+begin_src emacs-lisp
(use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/yasnippets"))
    (yas-global-mode 1))
#+end_src
YASnippet sometimes tries to auto-indent snippets, which can mess up our already indented snippets. Luckily, the auto-indent setting is assigned to a variable so we can easily disable it.

#+begin_src emacs-lisp
(setq yas-indent-line 'fixed)
#+end_src
* Afterword
And there you have it! VVMacs is fully configured! Of course, thats not the end of your Emacs journey. Want to start programming in a language other than python? Add your own [[https://emacs-lsp.github.io/lsp-mode/][language server!]] Want to integrate email into your emacs config? Try out [[https://www.emacswiki.org/emacs/mu4e][m4ue!]] There is no limit to the insane capabilities of GNU Emacs (you can even make it your [[https://github.com/ch11ng/exwm][window manager]]).


Special thanks to [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][System Crafters]] and the [[https://www.emacswiki.org/][EmacsWiki.]]
