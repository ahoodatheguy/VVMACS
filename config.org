#+TITLE:VVMACS Configuration

* MELPA
MELPA is a package repository for Emacs that allows it to use the most popular Emacs packages. The following code will add it to Emacs. 
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src
* Appearance
** Startup UI
*** Disable Startup Message
Disables the default GNU Emacs startup message. This will be replaced with the dashboard package.
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
*** Dashboard
This emacs package serves as a better alternative for the standard emacs startup message.
#+begin_src emacs-lisp
(use-package dashboard
    :ensure t
    :config
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-set-heading-icons t)
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5))))
#+end_src
** Modeline
The Doom-Modeline package is from Doom Emacs. It displays useful information such as filename, encoding, and even email notifications.
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode)
  :config
  (setq doom-modeline-env-python-executable "python"))
#+END_SRC
** Text Only Quit Messages
When you attempt to quit Emacs while you have unsaved changes open, Emacs opens a quite annoying popup message asking if you want to save before you quit. This is helpful, but on tiling window managers it's a bit of an issue as the messages will show up tiled like a normal window.

Instead, lets make all of our messages appear in the mini-buffer

#+begin_src emacs-lisp
(setq use-dialog-box nil)
#+END_SRC
** Default Font
#+begin_src emacs-lisp
(set-frame-font "Fira Code-18" nil t)
#+END_SRC
** Ivy Mode
Ivy Mode allows for better looking menus. Along with fuzzy autocomplete and rich colors.
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :config
  (ivy-mode 1))
#+END_SRC
** Swiper
Swiper is a fuzzy finding search tool to find text within buffers. Think of this like a better Ctrl+F.
#+begin_src emacs-lisp
(use-package swiper
    :defer t)

(if (equal system-type 'darwin)
    (global-set-key (kbd "s-f") 'counsel-grep-or-swiper)
    (global-set-key (kbd "C-f") 'counsel-grep-or-swiper))

#+END_SRC
** Which-Key
Emacs has a lot of keybindings, to the point where it can be hard to track. To solve this problem we use which-key. A package which shows a HUD type feature that displays what keybinds you are about to use.
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.3))
#+END_SRC
** Rainbow Delimeters
Sometimes it's hard to tell which parentheases are paired to which. Rainbow delimeters gives each parenthasee their own colors to help differentiate them.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
    :defer t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Line Numbers
Line numbers are helpful when debugging code.
#+begin_src emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode)
#+END_SRC
** Themes
The default Emacs theme is boring, and most importantly, it doesn't have a dark mode. So lets solve both those problems.
*** Doom-Themes
The doom-themes package is a collection of popular themes.
#+begin_src emacs-lisp
(use-package doom-themes)
#+END_SRC
*** Set Default Themes
Downloading themes means nothing if you can't actually use them, so set them with load-theme.
#+begin_src emacs-lisp
(load-theme 'doom-snazzy t)
#+END_SRC
* Evil Mode
This is for vim users, it enables Vim keybindings in Emacs. If you ever need to use default Emacs keybindings for some reason, you can toggle emacs mode with Ctrl + Z.
#+begin_src emacs-lisp
(use-package evil
   :ensure t
   :init
   (evil-mode)
   :config
   (evil-set-undo-system 'undo-tree))
#+end_src
** Undo-Tree
In order to fully make use of Evil mode, the undo-package is installed.
#+begin_src emacs-lisp
(use-package undo-tree
    :after evil
    :config (global-undo-tree-mode 1))
#+END_SRC
* Git Integration
Git is one of the most important tools for developers, chances are you've downloaded this distro from a git repo. We can use the magit package to bring the Git protocol to emacs.
#+begin_src emacs-lisp
(use-package magit
  :defer t)
#+END_SRC
* Escape Key Escapes
The escape key doesn't really work in Emacs, if you accidentally open a menu you're basically stuck in it. The following code will quit most menus when ESC is pressed.
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
* Save Key
Instead of using C-x C-s, lets configure Emacs to use the standard binding. C-s.
#+begin_src emacs-lisp
(if (equal system-type 'darwin)
  (global-set-key (kbd "s-s") 'save-buffer)
  (global-set-key (kbd "C-s") 'save-buffer)
  )
#+END_SRC
* General Keybindings
Vim has a very useful function called leader keys which are allow for (in my opinion) more reasonable keybindings.
In Emacs the package for leader keys is called general.el.
#+begin_src emacs-lisp
(use-package general
  :after evil
  :config
   (general-create-definer vvgeneral/magit-keys
  :keymaps '(normal)
  :prefix "SPC")
  (general-create-definer vvgeneral/buffer-keys
  :keymaps '(normal)
  :prefix "SPC")
  (general-create-definer vvgeneral/projectile-keys
  :keymaps '(normal)
  :prefix "SPC")
)
#+END_SRC
** Git Shortcuts
General used with magit allows for operating extremely fast. The leader key for git operations in this configuration is SPC-g.
#+begin_src emacs-lisp
(vvgeneral/magit-keys
  "g" '(:ignore t :which-key "magit shortcuts")
  "gs" '(magit-status :which-key "git status")
  "gb" '(magit-branch :which-key "git branch actions")
)
#+END_SRC
** Buffer Shortcuts
Buffer management in Emacs isn't really the most friendly out of the box. The keybindings are confusing and difficult to execute. Let's fix that with general leader keys.
#+begin_src emacs-lisp
 (vvgeneral/buffer-keys
     "b" '(:ignore t :which-key "buffer shortcuts")
     "bs"  '(counsel-switch-buffer :which-key "Switch active buffer")
     "bk"  '(kill-current-buffer :which-key "Kill active buffer")
     "br"  '(rename-buffer :which-key "Rename active buffer"))
#+END_SRC
** Projectile Shortcuts
This ones pretty simple because projectile has it's own shortcut menu.
#+begin_src emacs-lisp
(vvgeneral/projectile-keys
    "pr" '(projectile-command-map :which-key "projectile commands"))
#+END_SRC
* Split Navigation
In emacs you use split buffers when you often when you need to reference something. Instead of using our mouse, lets configure our split navigation in a Vim-like way.
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "C-l") 'windmove-right)
(define-key evil-normal-state-map (kbd "C-k") 'windmove-up)
(define-key evil-normal-state-map (kbd "C-j") 'windmove-down)
(define-key evil-normal-state-map (kbd "C-h") 'windmove-left)
#+END_SRC

* Org Mode Configuration
Ask anyone what pops into their head when they think of Emacs and what would they say? Org Mode! Unfortunately, the default Org Mode is a bit, lackluster. So let's fix that.

First, lets install Org Superstar, a super helpful package that adds things like bullet points, icons, and titles.

#+begin_src emacs-lisp
(use-package org-superstar
    :defer t
    :hook (org-mode . org-superstar-mode)
    :config
    (org-superstar-configure-like-org-bullets)
    (setq inhibit-compacting-font-caches t)
    (setq org-superstar-headline-bullets-list '("●" "—" "❍"))
    (setq org-hidden-keywords '(title)))
#+END_SRC

Second, lets put some margins on Org Mode so it looks like a real document.

#+begin_src emacs-lisp
(defun vv/org-mode-visual-fill ()
   (setq visual-fill-column-width 100
   visual-fill-column-center-text t)
   (visual-fill-column-mode 1))
(use-package visual-fill-column
   :defer t
   :hook (org-mode . vv/org-mode-visual-fill))
#+END_SRC

While we're at it, let's make the headers font a bit more "professional" font instead of something that looks like it came out of some weird hackerman terminal.

#+begin_src emacs-lisp
(dolist (face '((org-level-1 . 1.2)
  (org-level-2 . 1.1)
  (org-level-3 . 1.05)
  (org-level-4 . 1.0)
  (org-level-5 . 1.1)
  (org-level-6 . 1.1)
  (org-level-7 . 1.1)
  (org-level-8 . 1.1)))
(set-face-attribute (car face) nil :font "Roboto" :weight 'regular :height (cdr face)))
#+END_SRC

In my opinion, Org Mode is supposed to be a clean, minimal way of outlining. So I'm going to remove line numbers for Org mode as well as terminal modes.

#+begin_src emacs-lisp
(dolist (mode '(org-mode-hook
    term-mode-hook
    eshell-mode-hook
    shell-mode-hook))
(add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

Not everyone uses Emacs however, so we can use ox-pandoc to convert our org mode files into more standard formats like PDF or Markdown.

#+begin_src emacs-lisp
(use-package ox-pandoc
    :defer t)
#+END_SRC

And finally add some finishing touches by editing Org Mode itself.

 #+begin_src emacs-lisp
  (defun vv/org-setup ()
           (org-indent-mode)
           (visual-line-mode t)
           (setq evil-auto-indent nil)
           (setq org-src-ask-before-returning-to-edit-buffer nil))
(use-package org
   :hook (org-mode . vv/org-setup)
   :config
   (setq org-ellipsis " ⤵")
   (setq org-hide-emphasis-markers t)
   (setq org-support-shift-select t)
   (setq org-src-tab-acts-natively t)
   (setq org-startup-folded t)
   (setq org-startup-indented t))
#+END_SRC
* Backup Files
Emacs periodically creates backup files. The problem is they get in the way of your projects file structure and are quite annoying. We can send these files into a different directory with the following lines of code.
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
#+END_SRC
Emacs also creates lockfiles. Files that start and end with a #. You can also get rid of these. 90% of the time, you don't need these. So VVMacs disables it.
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+END_SRC
* Projectile
Projectile is a neat Emacs package for managing projects.
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :defer t
  :config (projectile-mode))
#+END_SRC
* Highlighting
Most editors are configured to delete any text that is highlighted with the Shift key after another key is pressed.
Emacs however, doesn't work like this, but fret not, for it can be configured to.

#+begin_src emacs-lisp
(delete-selection-mode 1)
#+END_SRC
* Development
Until now, this config has mostly been about making Emacs look nice and adding keybinds. But considering how Emacs is a *development* focused editor, there should be basic things that most IDEs have.
** Autocomplete
What's a good code editor without autocomplete? Fortunately, emacs has a package called company for this very purpose.
#+begin_src emacs-lisp
(use-package company
   :after lsp-mode
   :ensure t
   :defer t
   :hook (lsp-mode . company-mode)
   :custom
   (company-minimum-prefix-length 1)
   (company-idle-delay 0.0)
   :bind (:map company-active-map
            ("<tab>" . company-complete-selection)))
#+END_SRC
** Language Server
But how does Emacs know what to suggest? For that we use language servers. These provide helpful features like linting.
#+begin_src emacs-lisp
  (use-package lsp-mode
      :ensure t
      :defer t
      :commands (lsp lsp-deferred)
      :config
          (setq lsp-keymap-prefix "C-c l")
      :config
          (lsp-enable-which-key-integration t))
#+END_SRC
** Python
I personally code in python. So I'll be installing a langauge server for it. If you don't, you can look at the lsp-mode documentation for servers for your preffered language.

#+begin_src emacs-lisp
(use-package lsp-pyright
    :defer t
    :ensure t
    :hook (python-mode . (lambda ()
            (require 'lsp-pyright)
            (lsp-deferred))))  ; or lsp-deferred
#+END_SRC
I also like to code with exclusivley tabs for my indentation. So I'm going to set that up here along with some other neat settings.
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
  (lambda ()
    (setq indent-tabs-mode t)
    (setq python-indent 4)
    (setq tab-width 4)
    (toggle-truncate-lines t)
    (electric-pair-mode 1)))
#+END_SRC
** Term Mode
Running programs in terminals is very useful for running and debugging code. Unfortunately the term mode in Emacs is a bit outdated. Most unicode icons don't really work well, so lets change the encoding to fix that.
#+begin_src emacs-lisp
(add-hook 'term-exec-hook
          (function
           (lambda ()
             (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))))
#+END_SRC
* macOS
Mac users may experience difficulties with Emacs from $PATH issues to lack of command-key usage.
** $PATH fixes
lsp-mode doesn't really work with macOS because the $PATH isn't read correctly a lot.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
    :ensure t)
(if (equal system-type 'darwin)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize)))
#+END_SRC
* YASnippet
If you've ever written a LaTeX document, you've probably experienced the monotony of writing a preamble. It can be quite annoying to have to repeatedly declare the packages you want to use for every single document.
Unfortunately, writing boilerplate is not a problem unique to LaTeX. Fortunately, this is fixable with YASnippet.
[[https://www.youtube.com/watch?v=W-bRZlseNm0][Watch a YASnippet tutorial here.]]

#+begin_src emacs-lisp
(use-package yasnippet
:config
    (setq yas-snippet-dirs '("~/.emacs.d/yasnippets"))
    (yas-global-mode 1))
#+end_src
* Prettify Symbols
Prettify symbols is an easy way to integrate icons into your writing without actually messing up the contents of the file.

For example, open an Org mode document and type "WAIT". See how that turns into a pause icon? This is mostly used for org mode, but it can be used for code and anything involving text.
** Org Mode
Here icons are added to cover up some of orgs keywords like src blocks.
#+begin_src emacs-lisp
(defun org-icons ()
   "Beautify org mode keywords."
   (setq prettify-symbols-alist '(
	                          ("#+begin_src" . "")        
   				  ("#+begin_src" . "")
                              ("#+end_src" . "")
                              ("#+END_SRC" . "")
				  ("[ ]" . "")
				  ("[X]" . "")
                              ("TODO" . "")
	                          ("WAIT" . "")        
   				  ("NOPE" . "")
				  ("DONE" . ""))))

(add-hook 'org-mode-hook 'prettify-symbols-mode)
(add-hook 'org-mode-hook 'org-icons)
#+END_SRC
* Afterword
And there you have it! VVMacs is fully configured! Of course, thats not the end of your Emacs journey. Want to start programming in a language other than python? Add your own [[https://emacs-lsp.github.io/lsp-mode/][language server!]] Want to integrate email into your emacs config? Try out [[https://www.emacswiki.org/emacs/mu4e][m4ue!]] There is no limit to the insane capabilities of GNU Emacs (you can even make it your [[https://github.com/ch11ng/exwm][window manager]]).


Special thanks to [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][System Crafters]] and the [[https://www.emacswiki.org/][EmacsWiki.]]


